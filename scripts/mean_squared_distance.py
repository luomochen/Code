#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#------------------------------------------------------
# This script is used to process the aimd data to plot
# msd-t graph, which can show the dynamic stability of
# model. 
#------------------------------------------------------
import numpy as np
from matplotlib import pyplot as plt
from ase.io import read

def msd():
    """ Calculate the msd of aimd. Only support the VASP 
        and it will read the vasprun.xml. The msd is calculated.
        
    Args:

    Returns:
        list[]: msd of each step.
    """
    msd_values = []
    # index can designate the range of time to calculate.
    atoms_list = read('vasprun.xml', index=':')
    initial_positions = atoms_list[0].get_positions()
    for atoms in atoms_list:
        # The atom positions of present step.
        current_positions = atoms.get_positions()
        # The displacements between present step to initial step.
        displacements = current_positions - initial_positions
        # Squared displacements of present step.
        squared_displacements = np.sum(displacements**2, axis=1)        
        # MSD of present step.
        msd = np.mean(squared_displacements)
        msd_values.append(msd)
    return msd_values
    
def msd_grap_plot(msd_values, time_step, number_of_step, ini_step, fin_step):
    """Plot the msd - t graph.
    
    Args: msd_values (list[float]): msd of each step, which is generated by function msd().
          time_step (float): the took time of each time.
          number_of_step (integer): steps for plot.
          ini_step: plot start.
          fin_step: plot stop.
    
    Returns:
    """
    # Calculate the time use and get the x data.
    xs = np.linspace(ini_step, fin_step, number_of_step) * time_step
    ys = msd_values[ini_step:fin_step]
    # Plot
    fig, ax = plt.subplots(figsize=(15, 8), dpi=150)
    ax.plot(xs, ys, c="red", linewidth=3)
    ax.grid(True)
    ax.tick_params(axis='both', which='major', labelsize=18)
    ax.set_xlabel(r"Time step (fs)", fontsize=22)
    ax.set_ylabel(r"MSD ($\mathrm{\AA}$)", fontsize=22)
    fig.savefig("msd.png")
    plt.show()

def main():
    msd_values = msd()
    msd_grap_plot(msd_values, 1, 10000, 0, 10000)

if __name__ == "__main__":
    main()